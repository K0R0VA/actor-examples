use actix::Actor;
use actix::Context;
use actix::Handler;
use actix::Message;
use actix::Response;
use deadpool_postgres::Client;
use deadpool_postgres::Pool;
use deadpool_postgres::PoolError;
use futures::TryFutureExt;
use tokio_postgres::Row;
pub struct Database {
    pool: Pool,
}

impl Actor for Database {
    type Context = Context<Self>;
}

pub struct Hello;

impl Message for Hello {
    type Result = Result<String, PoolError>;
}

impl Handler<Hello> for Database {
    type Result = Response<Result<String, PoolError>>;
    fn handle(
        &mut self,
        _msg: Hello,
        _ctx: &mut Context<Self>,
    ) -> Response<Result<String, PoolError>> {
        let row: *const Pool = &self.pool;
        let pool: &Pool = unsafe { row.as_ref().unwrap() };
        let result = pool.get().and_then(|client: Client| async move {
            let stmt = client
                .prepare_cached("select concat('Hello ', $1::TEXT)")
                .await
                .expect("");
            let rows: &[Row] = &client.query(&stmt, &[&"world"]).await.expect("");
            let result = rows[0].get(0);
            Ok::<String, PoolError>(result)
        });
        Response::fut(result)
    }
}

#[cfg(test)]
mod database_test {
    use std::sync::Arc;

    use crate::database::{Database, Hello};
    use actix::Actor;
    use deadpool_postgres::{Config, ManagerConfig, RecyclingMethod};
    use futures::{stream, StreamExt};
    use tokio_postgres::NoTls;

    fn get_config() -> Config {
        let mut cfg = Config::new();
        cfg.host = Some("localhost".to_string());
        cfg.port = Some(5432);
        cfg.dbname = Some("actors".to_string());
        cfg.user = Some("postgres".to_string());
        cfg.password = Some("admin".to_string());
        cfg.manager = Some(ManagerConfig {
            recycling_method: RecyclingMethod::Fast,
        });
        cfg
    }

    #[actix::test]
    async fn say_hello() {
        let cfg = get_config();
        let pool = cfg.create_pool(NoTls).unwrap();
        let database = Database { pool };
        let addr = database.start();
        let message = addr.send(Hello).await;
        assert_eq!("Hello world".to_string(), message.unwrap().unwrap());
    }

    #[actix::test]
    async fn say_hello_many_times() {
        let cfg = get_config();
        let pool = cfg.create_pool(NoTls).unwrap();
        let database = Database { pool };
        let addr = database.start();
        let saying_stream = stream::iter(0..1000);
        let messages = saying_stream
            .fold(Vec::with_capacity(1000), |mut messages, _| async {
                let message = addr.send(Hello).await.unwrap().unwrap();
                messages.push(message);
                messages
            })
            .await;
        assert_eq!(1000, messages.len());
    }
    #[actix::test]
    async fn say_hello_in_two_threads() {
        let cfg = get_config();
        let pool = cfg.create_pool(NoTls).unwrap();
        let addr = Arc::new(Database { pool }.start());
        let addr1 = Arc::clone(addr)
        actix::spawn(async {
            let message = addr.send(Hello).await.unwrap().unwrap();
            assert_eq!("Hello world", message);
        });
    }
}
